/**
 * @file serial_port.h
 * @brief Header file for serial port communication.
 */

#ifndef SERIAL_PORT_H
#define SERIAL_PORT_H

#include <lcom/lcf.h>

/// Size of FIFO buffers
#define FIFO_SIZE   16

/// Base address of COM1 serial port
#define SERIAL_PORT_COM1    0x3F8

/// UART register offsets
#define UART_IIR 2  ///< Interrupt Identification Register
#define UART_RBR 0  ///< Receiver Buffer Register (Read Only)
#define UART_LCR 3  ///< Line Control Register
#define UART_THR 0  ///< Transmitter Holding Register (Write Only)
#define UART_IER 1  ///< Interrupt Enable Register
#define UART_LSR 5  ///< Line Status Register
#define UART_FCR 2  ///< FIFO Control Register
#define UART_FCR_CLEAR 6 ///< Clear the FIFO buffers

/// UART interrupt identification bits
#define UART_IIR_RDI  4 ///< Receiver Data Available Interrupt
#define UART_IIR_THRI 2 ///< Transmitter Holding Register Empty Interrupt
#define UART_IER_RDI  1 ///< Enable Receiver Data Available Interrupt
#define UART_IER_THRI 2 ///< Enable Transmitter Holding Register Empty Interrupt

/// UART line status bits
#define STAT_READY BIT(0)  ///< Receiver Ready
#define WRITE_READY BIT(5)  ///< Transmitter Holding Register Empty
#define STAT_ERROR (BIT(3) | BIT(2) | BIT(1)) ///< Error Bits


/**
 * @brief Subscribes to the interrupts generated by the serial port.
 *
 * @param bit_no Pointer to the variable where the bit mask for the subscribed interrupt will be stored.
 * @return 0 upon success, non-zero otherwise
 */
int serial_subscribe_int(uint8_t *bit_no);

/**
 * @brief Unsubscribes from the interrupts generated by the serial port.
 *
 * @return 0 upon success, non-zero otherwise
 */
int serial_unsubscribe_int();

/**
 * @brief Reads the status of the serial port.
 *
 * @param stat Pointer to the variable where the status byte will be stored.
 * @return 0 upon success, non-zero otherwise
 */
int serial_stat(uint8_t *stat);

/**
 * @brief Checks if the provided status byte contains any error.
 *
 * @param stat Status byte to be checked.
 * @return 1 if there's an error, 0 otherwise
 */
int stat_error(uint8_t stat);

/**
 * @brief Handles interrupts generated by the serial port.
 */
void serial_int_handler();

/**
 * @brief Configures the serial port.
 *
 * @return 0 upon success, non-zero otherwise
 */
int serial_config();

/**
 * @brief Sends a byte through the serial port.
 *
 * @param byte Byte to be sent.
 * @return 0 upon success, non-zero otherwise
 */
int send_byte(uint8_t byte);

/**
 * @brief Clears the FIFO buffers of the serial port.
 *
 * @return 0 upon success, non-zero otherwise
 */
int serial_clear_fifo();

#endif /* SERIAL_PORT_H */
